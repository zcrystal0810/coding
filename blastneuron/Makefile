#############################################################################
# Makefile for building: libblastneuron.so
# Generated by qmake (2.01a) (Qt 4.7.3) on: Wed Jan 8 23:18:21 2020
# Project:  blastneuron.pro
# Template: lib
# Command: /usr/local/Trolltech/Qt-4.7.3/bin/qmake -o Makefile blastneuron.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_PLUGIN -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -m64 -pipe -O2 -w -D_REENTRANT -fPIC $(DEFINES)
CXXFLAGS      = -m64 -pipe -O2 -w -D_REENTRANT -fPIC $(DEFINES)
INCPATH       = -I/usr/local/Trolltech/Qt-4.7.3/mkspecs/linux-g++-64 -I. -I/usr/local/Trolltech/Qt-4.7.3/include/QtCore -I/usr/local/Trolltech/Qt-4.7.3/include/QtGui -I/usr/local/Trolltech/Qt-4.7.3/include -I../../../../v3d_external/v3d_main/basic_c_fun -I../../../../v3d_external/v3d_main/jba/newmat11 -I../../../../v3d_external/v3d_main/common_lib/include -I.
LINK          = g++
LFLAGS        = -m64 -Wl,-O1 -Wl,-rpath,/usr/local/Trolltech/Qt-4.7.3/lib -shared
LIBS          = $(SUBLIBS)  -L/usr/local/Trolltech/Qt-4.7.3/lib -L../../../../v3d_external/v3d_main/jba/c++ -lv3dnewmat -lQtGui -L/usr/local/Trolltech/Qt-4.7.3/lib -L/usr/X11R6/lib64 -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/local/Trolltech/Qt-4.7.3/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = blastneuron_plugin.cpp \
		global_cmp/batch_compute_main.cpp \
		global_cmp/compute_gmi.cpp \
		global_cmp/compute_morph.cpp \
		global_cmp/global_retrieve_main.cpp \
		global_cmp/neuron_retrieve.cpp \
		global_cmp/pre_process.cpp \
		pre_processing/pre_processing_main.cpp \
		pre_processing/align_axis.cpp \
		pre_processing/pca1.cpp \
		pre_processing/prune_short_branch.cpp \
		pre_processing/resampling.cpp \
		tree_matching/local_alignment_main.cpp \
		tree_matching/my_surf_objs.cpp \
		tree_matching/neuron_tree_align.cpp \
		tree_matching/seg_weight.cpp \
		tree_matching/swc_utils.cpp \
		pointcloud_match/inverse_projection_main.cpp \
		pointcloud_match/q_pointcloud_match.cpp \
		pointcloud_match/q_pointcloud_match_refinematch_affine.cpp \
		pointcloud_match/q_pointcloud_match_refinematch_manifold.cpp \
		pointcloud_match/q_pointcloud_match_initialmatch.cpp \
		pointcloud_match/q_pointcloud_match_basic.cpp \
		../../../../v3d_external/v3d_main/basic_c_fun/v3d_message.cpp \
		../../../../v3d_external/v3d_main/basic_c_fun/basic_surf_objs.cpp moc_blastneuron_plugin.cpp
OBJECTS       = blastneuron_plugin.o \
		batch_compute_main.o \
		compute_gmi.o \
		compute_morph.o \
		global_retrieve_main.o \
		neuron_retrieve.o \
		pre_process.o \
		pre_processing_main.o \
		align_axis.o \
		pca1.o \
		prune_short_branch.o \
		resampling.o \
		local_alignment_main.o \
		my_surf_objs.o \
		neuron_tree_align.o \
		seg_weight.o \
		swc_utils.o \
		inverse_projection_main.o \
		q_pointcloud_match.o \
		q_pointcloud_match_refinematch_affine.o \
		q_pointcloud_match_refinematch_manifold.o \
		q_pointcloud_match_initialmatch.o \
		q_pointcloud_match_basic.o \
		v3d_message.o \
		basic_surf_objs.o \
		moc_blastneuron_plugin.o
DIST          = /usr/local/Trolltech/Qt-4.7.3/mkspecs/common/g++.conf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/common/unix.conf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/common/linux.conf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/qconfig.pri \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/modules/qt_webkit_version.pri \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt_functions.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt_config.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/exclusive_builds.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/default_pre.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/release.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/default_post.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/warn_off.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/unix/thread.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/moc.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/resources.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/uic.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/yacc.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/lex.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/include_source_dir.prf \
		blastneuron.pro
QMAKE_TARGET  = blastneuron
DESTDIR       = ../../../../v3d_external/bin/plugins/neuron_utilities/blastneuron/
TARGET        = libblastneuron.so
TARGETD       = libblastneuron.so

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile  ../../../../v3d_external/bin/plugins/neuron_utilities/blastneuron/$(TARGET)

../../../../v3d_external/bin/plugins/neuron_utilities/blastneuron/$(TARGET):  $(OBJECTS) $(SUBLIBS) $(OBJCOMP)  
	@$(CHK_DIR_EXISTS) ../../../../v3d_external/bin/plugins/neuron_utilities/blastneuron/ || $(MKDIR) ../../../../v3d_external/bin/plugins/neuron_utilities/blastneuron/ 
	-$(DEL_FILE) $(TARGET)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(LIBS) $(OBJCOMP)
	-$(MOVE) $(TARGET) ../../../../v3d_external/bin/plugins/neuron_utilities/blastneuron/



Makefile: blastneuron.pro  /usr/local/Trolltech/Qt-4.7.3/mkspecs/linux-g++-64/qmake.conf /usr/local/Trolltech/Qt-4.7.3/mkspecs/common/g++.conf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/common/unix.conf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/common/linux.conf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/qconfig.pri \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/modules/qt_webkit_version.pri \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt_functions.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt_config.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/exclusive_builds.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/default_pre.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/release.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/default_post.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/warn_off.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/unix/thread.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/moc.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/resources.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/uic.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/yacc.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/lex.prf \
		/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/include_source_dir.prf \
		/usr/local/Trolltech/Qt-4.7.3/lib/libQtGui.prl \
		/usr/local/Trolltech/Qt-4.7.3/lib/libQtCore.prl
	$(QMAKE) -o Makefile blastneuron.pro
/usr/local/Trolltech/Qt-4.7.3/mkspecs/common/g++.conf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/common/unix.conf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/common/linux.conf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/qconfig.pri:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/modules/qt_webkit_version.pri:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt_functions.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt_config.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/exclusive_builds.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/default_pre.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/release.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/default_post.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/warn_off.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/qt.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/unix/thread.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/moc.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/resources.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/uic.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/yacc.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/lex.prf:
/usr/local/Trolltech/Qt-4.7.3/mkspecs/features/include_source_dir.prf:
/usr/local/Trolltech/Qt-4.7.3/lib/libQtGui.prl:
/usr/local/Trolltech/Qt-4.7.3/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile blastneuron.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/blastneuron1.0.0 || $(MKDIR) .tmp/blastneuron1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/blastneuron1.0.0/ && $(COPY_FILE) --parents blastneuron_plugin.h pre_processing/sort_eswc.h .tmp/blastneuron1.0.0/ && $(COPY_FILE) --parents blastneuron_plugin.cpp global_cmp/batch_compute_main.cpp global_cmp/compute_gmi.cpp global_cmp/compute_morph.cpp global_cmp/global_retrieve_main.cpp global_cmp/neuron_retrieve.cpp global_cmp/pre_process.cpp pre_processing/pre_processing_main.cpp pre_processing/align_axis.cpp pre_processing/pca1.cpp pre_processing/prune_short_branch.cpp pre_processing/resampling.cpp tree_matching/local_alignment_main.cpp tree_matching/my_surf_objs.cpp tree_matching/neuron_tree_align.cpp tree_matching/seg_weight.cpp tree_matching/swc_utils.cpp pointcloud_match/inverse_projection_main.cpp pointcloud_match/q_pointcloud_match.cpp pointcloud_match/q_pointcloud_match_refinematch_affine.cpp pointcloud_match/q_pointcloud_match_refinematch_manifold.cpp pointcloud_match/q_pointcloud_match_initialmatch.cpp pointcloud_match/q_pointcloud_match_basic.cpp ../../../../v3d_external/v3d_main/basic_c_fun/v3d_message.cpp ../../../../v3d_external/v3d_main/basic_c_fun/basic_surf_objs.cpp .tmp/blastneuron1.0.0/ && (cd `dirname .tmp/blastneuron1.0.0` && $(TAR) blastneuron1.0.0.tar blastneuron1.0.0 && $(COMPRESS) blastneuron1.0.0.tar) && $(MOVE) `dirname .tmp/blastneuron1.0.0`/blastneuron1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/blastneuron1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_blastneuron_plugin.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_blastneuron_plugin.cpp
moc_blastneuron_plugin.cpp: blastneuron_plugin.h
	/usr/local/Trolltech/Qt-4.7.3/bin/moc $(DEFINES) $(INCPATH) blastneuron_plugin.h -o moc_blastneuron_plugin.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

blastneuron_plugin.o: blastneuron_plugin.cpp pre_processing/pre_processing_main.h \
		pre_processing/prune_short_branch.h \
		pre_processing/resampling.h \
		pre_processing/align_axis.h \
		global_cmp/batch_compute_main.h \
		global_cmp/global_retrieve_main.h \
		global_cmp/neuron_retrieve.h \
		tree_matching/local_alignment_main.h \
		tree_matching/neuron_tree_align.h \
		tree_matching/swc_utils.h \
		tree_matching/my_surf_objs.h \
		tree_matching/seg_weight.h \
		pointcloud_match/inverse_projection_main.h \
		pointcloud_match/q_pointcloud_match.h \
		pointcloud_match/q_pointcloud_match_basic.h \
		pointcloud_match/q_pointcloud_match_initialmatch.h \
		blastneuron_plugin.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o blastneuron_plugin.o blastneuron_plugin.cpp

batch_compute_main.o: global_cmp/batch_compute_main.cpp global_cmp/batch_compute_main.h \
		global_cmp/pre_process.h \
		pre_processing/prune_short_branch.h \
		pre_processing/resampling.h \
		pre_processing/align_axis.h \
		global_cmp/compute_morph.h \
		global_cmp/compute_gmi.h \
		getopt_tool.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o batch_compute_main.o global_cmp/batch_compute_main.cpp

compute_gmi.o: global_cmp/compute_gmi.cpp global_cmp/compute_gmi.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o compute_gmi.o global_cmp/compute_gmi.cpp

compute_morph.o: global_cmp/compute_morph.cpp global_cmp/compute_morph.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o compute_morph.o global_cmp/compute_morph.cpp

global_retrieve_main.o: global_cmp/global_retrieve_main.cpp global_cmp/global_retrieve_main.h \
		global_cmp/neuron_retrieve.h \
		getopt_tool.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o global_retrieve_main.o global_cmp/global_retrieve_main.cpp

neuron_retrieve.o: global_cmp/neuron_retrieve.cpp global_cmp/neuron_retrieve.h \
		global_cmp/pre_process.h \
		pre_processing/prune_short_branch.h \
		pre_processing/resampling.h \
		pre_processing/align_axis.h \
		global_cmp/compute_morph.h \
		global_cmp/compute_gmi.h \
		global_cmp/sim_measure.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o neuron_retrieve.o global_cmp/neuron_retrieve.cpp

pre_process.o: global_cmp/pre_process.cpp global_cmp/pre_process.h \
		pre_processing/prune_short_branch.h \
		pre_processing/resampling.h \
		pre_processing/align_axis.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pre_process.o global_cmp/pre_process.cpp

pre_processing_main.o: pre_processing/pre_processing_main.cpp pre_processing/pre_processing_main.h \
		pre_processing/prune_short_branch.h \
		pre_processing/resampling.h \
		pre_processing/align_axis.h \
		pre_processing/sort_eswc.h \
		getopt_tool.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pre_processing_main.o pre_processing/pre_processing_main.cpp

align_axis.o: pre_processing/align_axis.cpp pre_processing/align_axis.h \
		pre_processing/pca1.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o align_axis.o pre_processing/align_axis.cpp

pca1.o: pre_processing/pca1.cpp pre_processing/pca1.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pca1.o pre_processing/pca1.cpp

prune_short_branch.o: pre_processing/prune_short_branch.cpp pre_processing/prune_short_branch.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o prune_short_branch.o pre_processing/prune_short_branch.cpp

resampling.o: pre_processing/resampling.cpp pre_processing/resampling.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o resampling.o pre_processing/resampling.cpp

local_alignment_main.o: tree_matching/local_alignment_main.cpp tree_matching/local_alignment_main.h \
		tree_matching/neuron_tree_align.h \
		tree_matching/swc_utils.h \
		tree_matching/my_surf_objs.h \
		tree_matching/seg_weight.h \
		getopt_tool.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o local_alignment_main.o tree_matching/local_alignment_main.cpp

my_surf_objs.o: tree_matching/my_surf_objs.cpp tree_matching/my_surf_objs.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o my_surf_objs.o tree_matching/my_surf_objs.cpp

neuron_tree_align.o: tree_matching/neuron_tree_align.cpp tree_matching/neuron_tree_align.h \
		tree_matching/swc_utils.h \
		tree_matching/my_surf_objs.h \
		tree_matching/seg_weight.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o neuron_tree_align.o tree_matching/neuron_tree_align.cpp

seg_weight.o: tree_matching/seg_weight.cpp tree_matching/seg_weight.h \
		tree_matching/my_surf_objs.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o seg_weight.o tree_matching/seg_weight.cpp

swc_utils.o: tree_matching/swc_utils.cpp tree_matching/swc_utils.h \
		tree_matching/my_surf_objs.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o swc_utils.o tree_matching/swc_utils.cpp

inverse_projection_main.o: pointcloud_match/inverse_projection_main.cpp pointcloud_match/inverse_projection_main.h \
		pointcloud_match/q_pointcloud_match.h \
		pointcloud_match/q_pointcloud_match_basic.h \
		pointcloud_match/q_pointcloud_match_initialmatch.h \
		getopt_tool.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o inverse_projection_main.o pointcloud_match/inverse_projection_main.cpp

q_pointcloud_match.o: pointcloud_match/q_pointcloud_match.cpp pointcloud_match/q_pointcloud_match.h \
		pointcloud_match/q_pointcloud_match_basic.h \
		pointcloud_match/q_pointcloud_match_initialmatch.h \
		pointcloud_match/q_pointcloud_match_refinematch_manifold.h \
		pointcloud_match/q_pointcloud_match_refinematch_affine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o q_pointcloud_match.o pointcloud_match/q_pointcloud_match.cpp

q_pointcloud_match_refinematch_affine.o: pointcloud_match/q_pointcloud_match_refinematch_affine.cpp pointcloud_match/q_pointcloud_match_refinematch_affine.h \
		pointcloud_match/q_pointcloud_match_basic.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o q_pointcloud_match_refinematch_affine.o pointcloud_match/q_pointcloud_match_refinematch_affine.cpp

q_pointcloud_match_refinematch_manifold.o: pointcloud_match/q_pointcloud_match_refinematch_manifold.cpp pointcloud_match/q_pointcloud_match_refinematch_manifold.h \
		pointcloud_match/q_pointcloud_match_basic.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o q_pointcloud_match_refinematch_manifold.o pointcloud_match/q_pointcloud_match_refinematch_manifold.cpp

q_pointcloud_match_initialmatch.o: pointcloud_match/q_pointcloud_match_initialmatch.cpp pointcloud_match/q_pointcloud_match_initialmatch.h \
		pointcloud_match/q_pointcloud_match_basic.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o q_pointcloud_match_initialmatch.o pointcloud_match/q_pointcloud_match_initialmatch.cpp

q_pointcloud_match_basic.o: pointcloud_match/q_pointcloud_match_basic.cpp pointcloud_match/q_pointcloud_match_basic.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o q_pointcloud_match_basic.o pointcloud_match/q_pointcloud_match_basic.cpp

v3d_message.o: ../../../../v3d_external/v3d_main/basic_c_fun/v3d_message.cpp ../../../../v3d_external/v3d_main/basic_c_fun/v3d_message.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o v3d_message.o ../../../../v3d_external/v3d_main/basic_c_fun/v3d_message.cpp

basic_surf_objs.o: ../../../../v3d_external/v3d_main/basic_c_fun/basic_surf_objs.cpp ../../../../v3d_external/v3d_main/basic_c_fun/basic_surf_objs.h \
		../../../../v3d_external/v3d_main/basic_c_fun/v3d_basicdatatype.h \
		../../../../v3d_external/v3d_main/basic_c_fun/color_xyz.h \
		../../../../v3d_external/v3d_main/basic_c_fun/c_array_struct.hpp \
		../../../../v3d_external/v3d_main/basic_c_fun/v3d_message.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o basic_surf_objs.o ../../../../v3d_external/v3d_main/basic_c_fun/basic_surf_objs.cpp

moc_blastneuron_plugin.o: moc_blastneuron_plugin.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_blastneuron_plugin.o moc_blastneuron_plugin.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

